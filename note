import 'react-native-gesture-handler/Swipeable';
import React, { Component } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { FontAwesome5, Ionicons, MaterialIcons, EvilIcons, Foundation } from '@expo/vector-icons';

import Welcome from './screens/Welcome';
import Login from './screens/Login';

const Stack = createStackNavigator();

export default class App extends Component {
  createAuthStack = () =>
    <Stack.Navigator initialRouteName="Welcome" screenOptions={{
      header: null
    }} >
      <Stack.Screen name="Welcome"  component={Welcome}  />
      <Stack.Screen name="Login" component={Login} />
    </Stack.Navigator>
}






const Blob = RNFetchBlob.polyfill.Blob
const fs = RNFetchBlob.fs
window.XMLHttpRequest = RNFetchBlob.polyfill.XMLHttpRequest
window.Blob = Blob

showImagePicker((response) =>{
  if(!response.didCancel) {
    uploadImage(response.uri)
  }
})

export const uploadImage = (uri, mime='application/octet-stream' ) =>{
  return(dispatch) => {
    return new Promise((resolve, reject) => {
      const uploadUri = Platform.Os === 'ios' ? uri.replace('file://', '') : uri
      const sessionId = new Date().getTime()
      let uploadBlob = null
      const imageRef = firebase.storage().ref('reportimage').child('image')
      fs.readFile(uploadUri, 'base64')
      .then((data) => {
        return Blob.build(data, { type: `${mime}; BASE64` })
      })
      .then((blob) => {
        uploadBlob = blob
        return imageRef.put( blob, { contentType: mime } )
      })
      .then(() => {
        uploadBlob.close()
        return imageRef.getDownloadURL()
      })
      .then((url) => {
        resolve(url)
        storeReference(url, sessionId)
      })
      .catch((error) =>{reject(error)} )
    })
  }
}

const storeReference = ( downloadUrl, sessionId ) => {
  let  imageRef = firebase.storage().ref('reportimage').child('image')
  let currentUser = firebase.auth().currentUser
  let image = {
    type: 'image',
    url: downloadUrl,
    createdAt: sessionId,
    user: {
      id: currentUser.uid,
      email: currentUser.email
    }
  }
  firebase.database().ref('Report/')
}







<ScrollView style={{ flex: 1, backgroundColor: "white", marginTop: 5}}>
             <View style={{ marginTop: 30, marginLeft: 10, flexDirection: "row", }}  >
               <View style={{ justifyContent: "center", marginRight: 10,  }}>
                 <TouchableOpacity onPress={() => this.props.navigation.goBack()}><Ionicons name="md-arrow-round-back" size={24} /></TouchableOpacity>
                 
                 </View>
                <View style={{ justifyContent: "center" }}><Text style={{ fontWeight: "600", fontSize: 20,  }}> Profile Setting</Text></View>
                
            </View>
          <KeyboardAvoidingView behavior="position" style={{  marginHorizontal: 5,  marginTop: 30}}>
          <View style={{ height: 180, backgroundColor: "#202020", alignItems: "center", justifyContent: "flex-end", shadowOpacity: 0.5, shadowOffset: {height: 1}, shadowRadius: 4, borderTopStartRadius: 10, borderTopEndRadius: 10 }}>
          </View>
          <View style={{ height: 350, backgroundColor: "white", shadowOpacity: 0.5, shadowOffset: {height: 1, width: 0}, shadowRadius: 4, borderBottomStartRadius: 10, borderBottomEndRadius: 10,  }}>
          <View style={styles.avatar}>
            <Text style={{ fontSize: 15, fontWeight: "bold", color: "white" }}>{this.state.displayName}</Text>
          </View>
          <KeyboardAvoidingView behavior="position" style={{ marginTop: 50, marginHorizontal: 10 }}>
         

            <View style={{ marginTop: 15 }}>
                <Text style={styles.inputTitle}>Name</Text>
                <TextInput style={styles.input}
                onChangeText={displayName => this.setState({ displayName })}               
                autoCapitalize= "none"
                placeholder={this.state.displayName}></TextInput>
          </View>
          <View style={{ marginTop: 15 }}>
                <Text style={styles.inputTitle}>Email</Text>
                <TextInput style={styles.input}
                onChangeText={email => this.setState({ email })}
                autoCapitalize= "none"
                placeholder={this.state.email}></TextInput>
          </View>
          <View style={{ marginTop: 5}}>
          <TouchableOpacity style={{ marginHorizontal: 50, height: 60, backgroundColor: "dodgerblue",  justifyContent: "center", marginTop: 10, borderRadius: 10}} onPress={this.signOutUser} >
          <View style={{ flexDirection: "row", justifyContent: "center" }}>
          <Text style={{fontWeight: "500", fontSize: 17, color: "white", marginRight: 10}}>LOGOUT</Text>
              <AntDesign name="logout"  size={20} color="white" />
          </View>
          </TouchableOpacity>
          </View>
          </KeyboardAvoidingView>
          
          </View>
          
 
          </KeyboardAvoidingView>

      </ScrollView>






      import React, { Component } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, } from 'react-native';
import { FontAwesome5, Ionicons, MaterialCommunityIcons, EvilIcons, Foundation, MaterialIcons, SimpleLineIcons, Entypo, FontAwesome,
  AntDesign } from '@expo/vector-icons';

export default class Home extends Component {
  constructor(props) {
    super(props);
    this.state = {
    };
  }

  render() {
    return (
      <View style={{ flex: 1 }}>
        <Text> Home </Text>
        <View style={styles.tabbarcontainer}>
          <View style={styles.tabbar}>
          <TouchableOpacity onPress={() => {this.props.navigation.navigate('Discover')}}>
            <MaterialIcons name="explore" size={24} color="silver" />
          </TouchableOpacity>
          <TouchableOpacity onPress={() => {this.props.navigation.navigate('Sale')}}>
            <Entypo name="shop" size={24} color="silver" />
          </TouchableOpacity>
          <TouchableOpacity onPress={() => {this.props.navigation.navigate('History')}} >
            <Entypo name="open-book" size={24} color="silver" />
          </TouchableOpacity>
          <TouchableOpacity onPress={() => {this.props.navigation.navigate('Cart')}}>
            <Ionicons name="md-cart" size={24} color="silver" />
          </TouchableOpacity>
          </View>
          
        </View>
      </View>
    );
  }
}


const styles = StyleSheet.create({
  tabbar: {
    backgroundColor: "#242424",
    height: 60,
    width: "100%",
    
    borderRadius: 50,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-evenly",
  },
  tabbarcontainer: {
    marginHorizontal: 30,
    position: "absolute",
    bottom: 15
  }
})






import React, { Component } from 'react';

import { AppRegistry, StyleSheet, Text, View, Button } from 'react-native';

export default class Home extends React.Component {

  constructor(){

    super();

    this.state ={

      status:true

    }
  }

ShowHideTextComponentView = () =>{

  if(this.state.status == true)
  {
    this.setState({status: false})
  }
  else
  {
    this.setState({status: true})
  }
}

  render() {
  
    return (

      <View style={styles.MainContainer}>

      {
          // Pass any View or Component inside the curly bracket.
          // Here the ? Question Mark represent the ternary operator.

        this.state.status ? <Text style= {{ fontSize: 25, color: "#000", textAlign: 'center' }}> Hello Friends </Text> : null
      }

      <Button title="Hide Text Component" onPress={this.ShowHideTextComponentView} />

      </View>
    );
  }
}

const styles = StyleSheet.create({

MainContainer :{

// Setting up View inside content in Vertically center.
justifyContent: 'center',
flex:1,
margin: 10

}

});

AppRegistry.registerComponent('Myproject', () => Myproject);



return new Promise((res, rej) => {
            this.firestore
                .collection("subcription")
                
                .add({
                    show,
                    uid: this.uid,
                })
                .then(ref => {res(ref) })
                .catch(error => {rej(error)});
        } );